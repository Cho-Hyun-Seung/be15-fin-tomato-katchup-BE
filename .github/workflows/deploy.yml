name: Deploy to Amazon ECS (Skip Terraform)

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: tomato
  ECS_CLUSTER: tomato-cluster
  ECS_SERVICE: spring-service
  CONTAINER_NAME: spring-container

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Decode and write firebase.json
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.FIREBASE_CREDENTIALS_BASE64 }}" | base64 -d > src/main/resources/tomato-katchup-firebase-adminsdk-fbsvc-6b51d99c07.json

      - name: Decode and write credentials.json
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.CREDENTIAL }}" | base64 -d > src/main/resources/credentials.json

      - name: Build and Tag Docker image
        run: |
          docker build --build-arg SPRING_PROFILE=prod -t $ECR_REPOSITORY:latest .
          docker tag $ECR_REPOSITORY:latest ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest

      - name: Force ECS Service Redeploy
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment
